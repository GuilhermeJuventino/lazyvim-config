
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/notify[.]{vim,lua} ftplugin/notify_*.{vim,lua} ftplugin/notify/*.{vim,lua}
Searching for "ftplugin/notify[.]{vim,lua} ftplugin/notify_*.{vim,lua} ftplugin/notify/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/notify/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/notify[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/notify_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/notify/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/notify/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/notify[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/notify_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/notify/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/notify_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/notify/*.{vim,lua}"
not found in runtime path: "ftplugin/notify[.]{vim,lua} ftplugin/notify_*.{vim,lua} ftplugin/notify/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/notify[.]{vim,lua}
Searching for "indent/notify[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/notify[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/notify[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/notify[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/notify[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/notify[.]{vim,lua}"
not found in runtime path: "indent/notify[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "notify"
autocommand <Lua 362: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:72>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/lua/notify/service/buffer/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing BufWipeout Autocommands for "<buffer=44>"
autocommand <Lua 144: /usr/share/nvim/runtime/lua/vim/diagnostic.lua:329>

Executing: 
auto-removing autocommand: BufWipeout <buffer=44>
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 434: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/theme/doom.lua:119>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing FocusGained Autocommands for "*"
autocommand <Lua 357: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:10>

Executing: checktime
Executing: 
Executing: lua LazyVim.pick("oldfiles")()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: source /home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.test_harness').test_file([[<args>]])
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command([[<args>]])
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
continuing in nvim_exec2() called at nvim_exec2():0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
continuing in nvim_exec2() called at nvim_exec2():0
Executing: augroup filetypedetect
Executing: augroup END
Executing: :buffers! t
  1u%a-  "[No Name]"                    1 second ago
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=111> ++once ++nested :lua require('plenary.window').try_close(1111, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=111> ++nested ++once :lua require('plenary.window').close_related_win(1111, 1112)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=111> ++nested ++once :lua require('plenary.window').try_close(1112, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=113> ++once ++nested :lua require('plenary.window').try_close(1113, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=113> ++nested ++once :lua require('plenary.window').close_related_win(1113, 1114)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=113> ++nested ++once :lua require('plenary.window').try_close(1114, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=115> ++once ++nested :lua require('plenary.window').try_close(1115, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=115> ++nested ++once :lua require('plenary.window').close_related_win(1115, 1116)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=115> ++nested ++once :lua require('plenary.window').try_close(1116, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}
Searching for "ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopePrompt[.]{vim,lua}
Searching for "indent/TelescopePrompt[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopePrompt[.]{vim,lua}"
not found in runtime path: "indent/TelescopePrompt[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/TelescopePrompt.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/TelescopePrompt.*"
Searching for "/usr/share/nvim/runtime/parser/TelescopePrompt.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopePrompt.*"
Searching for "/usr/lib/nvim/parser/TelescopePrompt.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/TelescopePrompt.*"
not found in runtime path: "parser/TelescopePrompt.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "TelescopePrompt"
autocommand <Lua 351: ~/.local/share/nvim/lazy/mini.pairs/lua/mini/pairs.lua:483>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}
Searching for "ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopeResults[.]{vim,lua}
Searching for "indent/TelescopeResults[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopeResults[.]{vim,lua}"
not found in runtime path: "indent/TelescopeResults[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/TelescopeResults.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/TelescopeResults.*"
Searching for "/usr/share/nvim/runtime/parser/TelescopeResults.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/TelescopeResults.*"
Searching for "/usr/lib/nvim/parser/TelescopeResults.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/TelescopeResults.*"
not found in runtime path: "parser/TelescopeResults.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 87: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
continuing in nvim_exec2() called at InsertEnter Autocommands for "*":0
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
continuing in nvim_exec2() called at InsertEnter Autocommands for "*":0
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua"
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
continuing in nvim_exec2() called at InsertEnter Autocommands for "*":0
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing: source /home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/)
chdir(/home/guilhermej14/.config/nvim)
Executing: doautocmd <nomodeline> User CmpReady
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
continuing in nvim_exec2() called at InsertEnter Autocommands for "*":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing InsertEnter Autocommands for "*"
autocommand <Lua 464: ~/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/init.lua:101>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 579: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 680: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:227>

Executing: 
Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 309: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing: highlight! lualine_transitional_lualine_a_insert_to_lualine_b_insert guifg=#c3e88d guibg=#3b4261 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_b_insert_to_lualine_c_filetype_DevIconDefault_insert guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_b_insert_to_lualine_x_4_insert guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
auto-removing autocommand: BufDelete <buffer=113>
auto-removing autocommand: BufDelete <buffer=113>
auto-removing autocommand: WinClosed <buffer=113>
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Searching for "parser/toml.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/toml.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/toml.*"
Searching for "queries/toml/injections.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/toml/injections.scm"
Searching for "/usr/share/nvim/runtime/queries/toml/injections.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/toml/injections.scm"
Searching for "/usr/lib/nvim/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/toml/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/toml/injections.scm"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "queries/toml/highlights.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/toml/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/toml/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/toml/highlights.scm"
Searching for "/usr/lib/nvim/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/toml/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/toml/highlights.scm"

Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing InsertLeave Autocommands for "*"
autocommand <Lua 611: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 317: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:239>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_b_normal guifg=#82aaff guibg=#3b4261 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_b_normal_to_lualine_c_filetype_DevIconDefault_normal guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_b_normal_to_lualine_x_4_normal guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=111>"
autocommand :lua require('plenary.window').try_close(1112, true)

Executing: :lua require('plenary.window').try_close(1112, true)
auto-removing autocommand: BufDelete <buffer=111>
auto-removing autocommand: BufDelete <buffer=111>
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=115>"
autocommand :lua require('plenary.window').try_close(1116, true)

Executing: :lua require('plenary.window').try_close(1116, true)
Executing BufWipeout Autocommands for "<buffer=115>"
autocommand <Lua 144: /usr/share/nvim/runtime/lua/vim/diagnostic.lua:329>

Executing: 
auto-removing autocommand: BufDelete <buffer=115>
auto-removing autocommand: BufDelete <buffer=115>
auto-removing autocommand: BufWipeout <buffer=115>
auto-removing autocommand: VimResized <buffer=115>
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 434: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/theme/doom.lua:119>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing: lua LazyVim.pick()()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=119> ++once ++nested :lua require('plenary.window').try_close(1117, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=119> ++nested ++once :lua require('plenary.window').close_related_win(1117, 1118)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=119> ++nested ++once :lua require('plenary.window').try_close(1118, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=121> ++once ++nested :lua require('plenary.window').try_close(1119, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=121> ++nested ++once :lua require('plenary.window').close_related_win(1119, 1120)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=121> ++nested ++once :lua require('plenary.window').try_close(1120, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=123> ++once ++nested :lua require('plenary.window').try_close(1121, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=123> ++nested ++once :lua require('plenary.window').close_related_win(1121, 1122)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=123> ++nested ++once :lua require('plenary.window').try_close(1122, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}
Searching for "ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopePrompt[.]{vim,lua}
Searching for "indent/TelescopePrompt[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopePrompt[.]{vim,lua}"
not found in runtime path: "indent/TelescopePrompt[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "TelescopePrompt"
autocommand <Lua 351: ~/.local/share/nvim/lazy/mini.pairs/lua/mini/pairs.lua:483>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}
Searching for "ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopeResults[.]{vim,lua}
Searching for "indent/TelescopeResults[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopeResults[.]{vim,lua}"
not found in runtime path: "indent/TelescopeResults[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 309: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 464: ~/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/init.lua:101>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 579: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 680: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:227>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
auto-removing autocommand: BufDelete <buffer=121>
auto-removing autocommand: BufDelete <buffer=121>
auto-removing autocommand: WinClosed <buffer=121>
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 26: runtime! syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}
Searching for "syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/syntax/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/syntax/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/text/*.{vim,lua}"
Searching for "/usr/lib/nvim/syntax/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/text/*.{vim,lua}"
not found in runtime path: "syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}"
line 27:       endif
line 28:     endfor
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/json.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/json.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/json.*"
Searching for "queries/json/injections.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/json/injections.scm"
Searching for "/usr/share/nvim/runtime/queries/json/injections.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/json/injections.scm"
Searching for "/usr/lib/nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/json/injections.scm"
not found in runtime path: "queries/json/injections.scm"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "queries/json/highlights.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/json/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/json/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/json/highlights.scm"
Searching for "/usr/lib/nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/json/highlights.scm"
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/lua.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/lua.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/lua.*"
Searching for "queries/lua/injections.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/lua/injections.scm"
Searching for "/usr/share/nvim/runtime/queries/lua/injections.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/injections.scm"
Searching for "/usr/lib/nvim/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/injections.scm"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/comment.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/comment.*"
Searching for "/usr/share/nvim/runtime/parser/comment.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/comment.*"
Searching for "/usr/lib/nvim/parser/comment.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/comment.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/comment.*"
not found in runtime path: "parser/comment.*"
Searching for "queries/lua/highlights.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/lua/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/lua/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/highlights.scm"
Searching for "/usr/lib/nvim/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/lua/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/lua/highlights.scm"
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing FocusGained Autocommands for "*"
autocommand <Lua 357: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:10>

Executing: checktime
Executing: 
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "queries/json/injections.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/json/injections.scm"
Searching for "/usr/share/nvim/runtime/queries/json/injections.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/json/injections.scm"
Searching for "/usr/lib/nvim/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/json/injections.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/json/injections.scm"
not found in runtime path: "queries/json/injections.scm"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/treesitter/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "queries/json/highlights.scm" in runtime path
Searching for "/home/guilhermej14/.config/nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/queries/json/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/json/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/json/highlights.scm"
Searching for "/usr/lib/nvim/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/queries/json/highlights.scm"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/queries/json/highlights.scm"
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"


Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing InsertLeave Autocommands for "*"
autocommand <Lua 611: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 317: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:239>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=119>"
autocommand :lua require('plenary.window').try_close(1118, true)

Executing: :lua require('plenary.window').try_close(1118, true)
auto-removing autocommand: BufDelete <buffer=119>
auto-removing autocommand: BufDelete <buffer=119>
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=123>"
autocommand :lua require('plenary.window').try_close(1122, true)

Executing: :lua require('plenary.window').try_close(1122, true)
Executing BufWipeout Autocommands for "<buffer=123>"
autocommand <Lua 847: /usr/share/nvim/runtime/lua/vim/diagnostic.lua:329>

Executing: 
auto-removing autocommand: BufDelete <buffer=123>
auto-removing autocommand: BufDelete <buffer=123>
auto-removing autocommand: BufWipeout <buffer=123>
auto-removing autocommand: VimResized <buffer=123>
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 434: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/theme/doom.lua:119>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing: lua LazyVim.pick()()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=130> ++once ++nested :lua require('plenary.window').try_close(1123, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=130> ++nested ++once :lua require('plenary.window').close_related_win(1123, 1124)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=130> ++nested ++once :lua require('plenary.window').try_close(1124, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=132> ++once ++nested :lua require('plenary.window').try_close(1125, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=132> ++nested ++once :lua require('plenary.window').close_related_win(1125, 1126)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=132> ++nested ++once :lua require('plenary.window').try_close(1126, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
Executing: autocmd BufDelete  <buffer=134> ++once ++nested :lua require('plenary.window').try_close(1127, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: unlet! b:keymap_name
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/window/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd BufDelete <buffer=134> ++nested ++once :lua require('plenary.window').close_related_win(1127, 1128)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd WinClosed <buffer=134> ++nested ++once :lua require('plenary.window').try_close(1128, true)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/popup/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}
Searching for "ftplugin/TelescopePrompt[.]{vim,lua} ftplugin/TelescopePrompt_*.{vim,lua} ftplugin/TelescopePrompt/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopePrompt/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopePrompt/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopePrompt[.]{vim,lua}
Searching for "indent/TelescopePrompt[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopePrompt[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopePrompt[.]{vim,lua}"
not found in runtime path: "indent/TelescopePrompt[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "TelescopePrompt"
autocommand <Lua 351: ~/.local/share/nvim/lazy/mini.pairs/lua/mini/pairs.lua:483>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/lua/plenary/async/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}
Searching for "ftplugin/TelescopeResults[.]{vim,lua} ftplugin/TelescopeResults_*.{vim,lua} ftplugin/TelescopeResults/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults.lua
continuing in <SNR>1_LoadFTPlugin
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/TelescopeResults/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/TelescopeResults/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/TelescopeResults[.]{vim,lua}
Searching for "indent/TelescopeResults[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/TelescopeResults[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/TelescopeResults[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/TelescopeResults[.]{vim,lua}"
not found in runtime path: "indent/TelescopeResults[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 309: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 464: ~/.local/share/nvim/lazy/cmp-nvim-lsp/lua/cmp_nvim_lsp/init.lua:101>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 579: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertEnter Autocommands for "*"
autocommand <Lua 680: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:227>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Autocommands for "*"

Executing CursorMovedI Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMovedI Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChangedI Autocommands for "*"

Executing TextChangedI Autocommands for "*"
autocommand <Lua 262: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChangedI Autocommands for "*"
autocommand <Lua 565: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
auto-removing autocommand: BufDelete <buffer=132>
auto-removing autocommand: BufDelete <buffer=132>
auto-removing autocommand: WinClosed <buffer=132>
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 26: runtime! syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}
Searching for "syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/syntax/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/syntax/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/text/*.{vim,lua}"
Searching for "/usr/lib/nvim/syntax/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/text/*.{vim,lua}"
not found in runtime path: "syntax/text[.]{vim,lua} syntax/text/*.{vim,lua}"
line 27:       endif
line 28:     endfor
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"


Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing InsertLeave Autocommands for "*"
autocommand <Lua 611: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/autocmd.lua:22>

Executing: 
Executing InsertLeave Autocommands for "*"
autocommand <Lua 317: ~/.local/share/nvim/lazy/nvim-snippets/lua/snippets/utils/builtin.lua:239>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/gitignore.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/gitignore.*"
Searching for "/usr/share/nvim/runtime/parser/gitignore.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/gitignore.*"
Searching for "/usr/lib/nvim/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/gitignore.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/gitignore.*"
not found in runtime path: "parser/gitignore.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/previewers/)
chdir(/home/guilhermej14/.config/nvim)
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>17_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 26: runtime! syntax/gitignore[.]{vim,lua} syntax/gitignore/*.{vim,lua}
Searching for "syntax/gitignore[.]{vim,lua} syntax/gitignore/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/syntax/gitignore/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/syntax/gitignore[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/syntax/)
chdir(/home/guilhermej14/.config/nvim)
line 26: sourcing "/usr/share/nvim/runtime/syntax/gitignore.vim"
line 1: " Vim syntax file
line 2: " Language:^Igit ignore
line 3: " Maintainer:^IObserverOfTime <chronobserver@disroot.org>
line 4: " Filenames:^I.gitignore, *.git/info/exclude
line 5: " Last Change:^I2022 Sep 10
line 6: 
line 7: if exists('b:current_syntax')
line 8:     finish
line 9: endif
line 10: 
line 11: " Comment
line 12: syn keyword gitignoreTodo contained TODO FIXME XXX
line 13: syn match gitignoreComment /^#.*/ contains=gitignoreTodo
line 14: 
line 15: " Pattern
line 16: syn match gitignorePattern /^#\@!.*$/ contains=gitignoreNegation,gitignoreGlob,gitignoreRange,gitignoreSeparator
line 17: syn match gitignoreNegation /^!/ contained
line 18: syn match gitignoreGlob /\\\@1<![?*]/ contained
line 19: syn match gitignoreRange /\\\@1<!\[.\{-}\]/ contained
line 20: syn match gitignoreSeparator '/' contained
line 21: 
line 22: hi def link gitignoreComment Comment
line 23: hi def link gitignoreGlob Special
line 24: hi def link gitignoreNegation SpecialChar
line 25: hi def link gitignoreRange Special
line 26: hi def link gitignoreSeparator Delimiter
line 27: hi def link gitignoreTodo Todo
line 28: 
line 29: let b:current_syntax = 'gitignore'
finished sourcing /usr/share/nvim/runtime/syntax/gitignore.vim
continuing in <SNR>17_SynSet
Searching for "/usr/share/nvim/runtime/syntax/gitignore/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/gitignore[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/syntax/gitignore/*.{vim,lua}"
Searching for "/usr/lib/nvim/syntax/gitignore[.]{vim,lua}"
Searching for "/usr/lib/nvim/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/syntax/gitignore/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/gitignore[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/syntax/gitignore/*.{vim,lua}"
line 27:       endif
line 28:     endfor
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>17_SynSet returning #0

continuing in Syntax Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=130>"
autocommand :lua require('plenary.window').try_close(1124, true)

Executing: :lua require('plenary.window').try_close(1124, true)
auto-removing autocommand: BufDelete <buffer=130>
auto-removing autocommand: BufDelete <buffer=130>
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "<buffer=134>"
autocommand :lua require('plenary.window').try_close(1128, true)

Executing: :lua require('plenary.window').try_close(1128, true)
Executing BufWipeout Autocommands for "<buffer=134>"
autocommand <Lua 117: /usr/share/nvim/runtime/lua/vim/diagnostic.lua:329>

Executing: 
auto-removing autocommand: BufDelete <buffer=134>
auto-removing autocommand: BufDelete <buffer=134>
auto-removing autocommand: BufWipeout <buffer=134>
auto-removing autocommand: VimResized <buffer=134>
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 254: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing WinEnter Autocommands for "*"
autocommand <Lua 274: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/)
chdir(/home/guilhermej14/.config/nvim)
Executing: edit log.txt
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufAdd Autocommands for "*"
autocommand <Lua 138: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:129>

Executing: 
Executing BufAdd Autocommands for "*"
autocommand <Lua 240: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/ui.lua:87>

Executing: 
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
auto-removing autocommand: CursorMoved <buffer=1>
auto-removing autocommand: VimResized <buffer=1>
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufReadPre Autocommands for "*"
autocommand <Lua 133: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/lua/persistence/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Reading ShaDa file "/home/guilhermej14/.local/state/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*"
autocommand <Lua 45: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/plugin.lua:77>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 49: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/lua/mason/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
continuing in nvim_exec2() called at BufReadPost Autocommands for "*":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/lsp/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/lsp/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/lsp/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/lsp/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/lua/mason-lspconfig/api/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/lua/lspconfig/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: source /home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim"
line 1: command! -nargs=* TodoQuickFix lua require("todo-comments.search").setqflist(<q-args>)
line 2: command! -nargs=* TodoLocList lua require("todo-comments.search").setloclist(<q-args>)
line 3: command! -nargs=* TodoTelescope Telescope todo-comments todo <args>
line 4: command! -nargs=* TodoTrouble Trouble todo <args>
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
continuing in nvim_exec2() called at BufReadPost Autocommands for "*":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: hi def TodoBgFIX guibg=#c53b53 guifg=#c8d3f5 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgFIX guibg=NONE guifg=#c53b53 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignFIX guibg=#222436 guifg=#c53b53 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgTEST guibg=#c099ff guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgTEST guibg=NONE guifg=#c099ff gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignTEST guibg=#222436 guifg=#c099ff gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgWARN guibg=#ffc777 guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgWARN guibg=NONE guifg=#ffc777 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignWARN guibg=#222436 guifg=#ffc777 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgHACK guibg=#ffc777 guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgHACK guibg=NONE guifg=#ffc777 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignHACK guibg=#222436 guifg=#ffc777 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgNOTE guibg=#4fd6be guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgNOTE guibg=NONE guifg=#4fd6be gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignNOTE guibg=#222436 guifg=#4fd6be gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgTODO guibg=#0db9d7 guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgTODO guibg=NONE guifg=#0db9d7 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignTODO guibg=#222436 guifg=#0db9d7 gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoBgPERF guibg=#c099ff guifg=#222436 gui=BOLD
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoFgPERF guibg=NONE guifg=#c099ff gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: hi def TodoSignPERF guibg=#222436 guifg=#c099ff gui=NONE
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup Todo
Executing:         autocmd!
Executing:         autocmd BufWinEnter,WinNew * lua require("todo-comments.highlight").attach()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/lua/todo-comments/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/lua/todo-comments/)
chdir(/home/guilhermej14/.config/nvim)
Executing:         autocmd BufWritePost * silent! lua require'trouble'.refresh({auto = true, provider = "todo"})
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/lua/todo-comments/)
chdir(/home/guilhermej14/.config/nvim)
Executing:         autocmd WinScrolled * lua require("todo-comments.highlight").highlight_win()
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/lua/todo-comments/)
chdir(/home/guilhermej14/.config/nvim)
Executing:         autocmd ColorScheme * lua vim.defer_fn(require("todo-comments.config").colors, 10)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/lua/todo-comments/)
chdir(/home/guilhermej14/.config/nvim)
Executing:       augroup end
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/commands.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/commands.lua"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/)
chdir(/home/guilhermej14/.config/nvim)
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/commands.lua
continuing in nvim_exec2() called at BufReadPost Autocommands for "*":0
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: source /home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/plugin/)
chdir(/home/guilhermej14/.config/nvim)
line 0: sourcing "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua"
finished sourcing /home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua
continuing in nvim_exec2() called at BufReadPost Autocommands for "*":0
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/)
chdir(/home/guilhermej14/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
Executing BufReadPost Autocommands for "*"
autocommand <Lua 595: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/linting.lua:48>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 556: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:145>

Executing: 
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 186: /usr/share/nvim/runtime/filetype.lua:10>

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/)
chdir(/home/guilhermej14/.config/nvim)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}
Searching for "ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/text.vim"
line 1: " Vim filetype plugin
line 2: " Language:^I^IText
line 3: " Maintainer:^I^IDavid Barnett <daviebdawg+vim@gmail.com>
line 4: " Last Change:^I^I2019 Jan 10
line 5: 
line 6: if exists('b:did_ftplugin')
line 7:   finish
line 8: endif
line 9: let b:did_ftplugin = 1
line 10: 
line 11: let b:undo_ftplugin = 'setlocal comments< commentstring<'
line 12: 
line 13: " We intentionally don't set formatoptions-=t since text should wrap as text.
line 14: 
line 15: " Pseudo comment leaders to indent bulleted lists with '-' and '*'.  And allow
line 16: " for Mail quoted text with '>'.
line 17: setlocal comments=fb:-,fb:*,n:>
line 18: setlocal commentstring=
finished sourcing /usr/share/nvim/runtime/ftplugin/text.vim
continuing in <SNR>1_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/text[.]{vim,lua}
Searching for "indent/text[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/text[.]{vim,lua}"
not found in runtime path: "indent/text[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 771: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 572: ~/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/plugin.lua:190>

Executing: 
Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 210: /usr/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 136: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:136>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 358: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:38>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling <SNR>11_LocalBrowse('/home/guilhermej14/.config/nvim/log.txt')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
<SNR>11_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand <Lua 234: ~/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/init.lua:213>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/lua/dashboard/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
autocommand <Lua 239: ~/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline.lua:141>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 253: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/main.lua:16>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 266: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing BufEnter Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing BufEnter Autocommands for "*"
autocommand <Lua 275: vim/_editor.lua:0>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/util/root.lua:161>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
Executing BufWinEnter Autocommands for "*"
autocommand lua require("todo-comments.highlight").attach()

Executing: lua require("todo-comments.highlight").attach()
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 691: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing: unlet! b:keymap_name
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/lua/vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_normal guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_insert guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_visual guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_replace guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_command guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_terminal guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_filetype_DevIconTxt_inactive guifg=#89e051 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_normal guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_insert guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_visual guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_replace guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_command guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_terminal guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_c_14_LV_Bold_inactive guifg=#c8d3f5 guibg=#1e2030 gui=bold
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
Executing: highlight! lualine_transitional_lualine_b_normal_to_lualine_c_filetype_DevIconTxt_normal guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/lua/)
chdir(/home/guilhermej14/.config/nvim)
Executing: autocmd User CocDiagnosticChange lua require('bufferline.diagnostics').refresh_coc_diagnostics()
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/lua/bufferline/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/lua/telescope/actions/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing FocusGained Autocommands for "*"
autocommand <Lua 357: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:10>

Executing: checktime
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 186: /usr/share/nvim/runtime/filetype.lua:10>

Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 210: /usr/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 358: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:38>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 595: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/linting.lua:48>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 556: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:145>

Executing: 
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 2: setlocal comments< commentstring<
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}
Searching for "ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/text.vim"
line 1: " Vim filetype plugin
line 2: " Language:^I^IText
line 3: " Maintainer:^I^IDavid Barnett <daviebdawg+vim@gmail.com>
line 4: " Last Change:^I^I2019 Jan 10
line 5: 
line 6: if exists('b:did_ftplugin')
line 7:   finish
line 8: endif
line 9: let b:did_ftplugin = 1
line 10: 
line 11: let b:undo_ftplugin = 'setlocal comments< commentstring<'
line 12: 
line 13: " We intentionally don't set formatoptions-=t since text should wrap as text.
line 14: 
line 15: " Pseudo comment leaders to indent bulleted lists with '-' and '*'.  And allow
line 16: " for Mail quoted text with '>'.
line 17: setlocal comments=fb:-,fb:*,n:>
line 18: setlocal commentstring=
finished sourcing /usr/share/nvim/runtime/ftplugin/text.vim
continuing in <SNR>1_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/text[.]{vim,lua}
Searching for "indent/text[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/text[.]{vim,lua}"
not found in runtime path: "indent/text[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 771: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 572: ~/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/plugin.lua:190>

Executing: 
Skipping undo file write, nothing to undo
Executing FileChangedShellPost Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileChangedShellPost Autocommands for "*"
autocommand <Lua 118: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 828: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: doautocmd User MiniAnimateDoneCursor
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing FocusGained Autocommands for "*"
autocommand <Lua 357: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:10>

Executing: checktime
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 186: /usr/share/nvim/runtime/filetype.lua:10>

Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 210: /usr/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 358: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/autocmds.lua:38>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 595: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/linting.lua:48>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 556: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:145>

Executing: 
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 2: setlocal comments< commentstring<
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}
Searching for "ftplugin/text[.]{vim,lua} ftplugin/text_*.{vim,lua} ftplugin/text/*.{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.config/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text[.]{vim,lua}"
chdir(/home/guilhermej14/.config/nvim)
chdir(/usr/share/nvim/runtime/ftplugin/)
chdir(/home/guilhermej14/.config/nvim)
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/text.vim"
line 1: " Vim filetype plugin
line 2: " Language:^I^IText
line 3: " Maintainer:^I^IDavid Barnett <daviebdawg+vim@gmail.com>
line 4: " Last Change:^I^I2019 Jan 10
line 5: 
line 6: if exists('b:did_ftplugin')
line 7:   finish
line 8: endif
line 9: let b:did_ftplugin = 1
line 10: 
line 11: let b:undo_ftplugin = 'setlocal comments< commentstring<'
line 12: 
line 13: " We intentionally don't set formatoptions-=t since text should wrap as text.
line 14: 
line 15: " Pseudo comment leaders to indent bulleted lists with '-' and '*'.  And allow
line 16: " for Mail quoted text with '>'.
line 17: setlocal comments=fb:-,fb:*,n:>
line 18: setlocal commentstring=
finished sourcing /usr/share/nvim/runtime/ftplugin/text.vim
continuing in <SNR>1_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/text/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/text/*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text_*.{vim,lua}"
Searching for "/usr/lib/nvim/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/ftplugin/text/*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text_*.{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/ftplugin/text/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/text[.]{vim,lua}
Searching for "indent/text[.]{vim,lua}" in runtime path
Searching for "/home/guilhermej14/.config/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/text[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/text[.]{vim,lua}"
Searching for "/usr/lib/nvim/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/indent/text[.]{vim,lua}"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/indent/text[.]{vim,lua}"
not found in runtime path: "indent/text[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileType Autocommands for "*"
autocommand <Lua 164: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 165: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 162: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 313: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 771: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 572: ~/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/plugin.lua:190>

Executing: 
Skipping undo file write, nothing to undo
Executing FileChangedShellPost Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing FileChangedShellPost Autocommands for "*"
autocommand <Lua 118: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand <Lua 261: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/sources/lsp.lua:31>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 267: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 828: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
line 37:     endif
line 38:   endif
line 39: 
line 40:   " Figure out the arguments for searchpairpos().
line 41:   if i % 2 == 0
line 42:     let s_flags = 'nW'
line 43:     let c2 = plist[i + 1]
line 44:   else
line 45:     let s_flags = 'nbW'
line 46:     let c2 = c
line 47:     let c = plist[i - 1]
line 48:   endif
line 49:   if c == '['
line 50:     let c = '\['
line 51:     let c2 = '\]'
line 52:   endif
line 53: 
line 54:   " Find the match.  When it was just before the cursor move it there for a
line 55:   " moment.
line 56:   if before > 0
line 57:     let has_getcurpos = exists("*getcurpos")
line 58:     if has_getcurpos
line 59:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 60:       let save_cursor = getcurpos()
line 61:     else
line 62:       let save_cursor = winsaveview()
line 63:     endif
line 64:     call cursor(c_lnum, c_col - before)
line 65:   endif
line 66: 
line 67:   if !has("syntax") || !exists("g:syntax_on")
line 68:     let s_skip = "0"
line 69:   else
line 70:     " Build an expression that detects whether the current cursor position is
line 71:     " in certain syntax types (string, comment, etc.), for use as
line 72:     " searchpairpos()'s skip argument.
line 73:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 74:     " match "symbol" for lispBarSymbol.
line 75:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 78:     " If executing the expression determines that the cursor is currently in
line 79:     " one of the syntax types, then we want searchpairpos() to find the pair
line 80:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 81:     " outside of the syntax types and s_skip should keep its value so we skip
line 82:     " any matching pair inside the syntax types.
line 83:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 84:     try
line 85:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 85: if synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0 | let s_skip = "0" | endif
line 85:  let s_skip = "0" | endif
line 85:  endif
line 86:     catch /^Vim\%((\a\+)\)\=:E363/
line 87:       " We won't find anything, so skip searching, should keep Vim responsive.
line 88:       return
line 89:     endtry
line 90:   endif
line 91: 
line 92:   " Limit the search to lines visible in the window.
line 93:   let stoplinebottom = line('w$')
line 94:   let stoplinetop = line('w0')
line 95:   if i % 2 == 0
line 96:     let stopline = stoplinebottom
line 97:   else
line 98:     let stopline = stoplinetop
line 99:   endif
line 100: 
line 101:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 102:   " This fails when a timeout is not supported.
line 103:   if mode() == 'i' || mode() == 'R'
line 104:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 105:   else
line 106:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 107:   endif
line 108:   try
line 109:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 110:   catch /E118/
line 111:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 112:     " a long time on closed folds and long lines.
line 113:     " The "viewable" variables give a range in which we can scroll while
line 114:     " keeping the cursor at the same position.
line 115:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 116:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 117:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 118:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 119:     " one of these stoplines will be adjusted below, but the current values are
line 120:     " minimal boundaries within the current window
line 121:     if i % 2 == 0
line 122:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 123: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 124: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 125:       else
line 126: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 127:       endif
line 128:       let stoplinebottom = stopline
line 129:     else
line 130:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 131: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 132: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 133:       else
line 134: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 135:       endif
line 136:       let stoplinetop = stopline
line 137:     endif
line 138:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 139:   endtry
line 140: 
line 141:   if before > 0
line 142:     if has_getcurpos
line 143:       call setpos('.', save_cursor)
line 144:     else
line 145:       call winrestview(save_cursor)
line 146:     endif
line 147:   endif
line 148: 
line 149:   " If a match is found setup match highlighting.
line 150:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 151:     if s:has_matchaddpos
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 153:     else
line 154:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 156:       call add(w:matchparen_ids, 3)
line 157:     endif
line 158:     let w:paren_hl_on = 1
line 159:   endif
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 268: ~/.local/share/nvim/lazy/trouble.nvim/lua/trouble/view/section.lua:148>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})
Executing CursorMoved Autocommands for "*"
autocommand <Lua 276: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1251>

Executing: 
autocommand <Lua 272: vim/_editor.lua:0>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/flash.nvim/lua/flash/plugins/char.lua:143>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 532: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 854: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:26>

Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>10_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>10_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>10_Remove_Matches returning #0

continuing in <SNR>10_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
<SNR>10_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand <Lua 280: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1209>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 349: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/view/scrollbar.lua:43>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 740: ~/.local/share/nvim/lazy/indent-blankline.nvim/lua/ibl/autocmds.lua:40>

Executing: 
Searching for "parser/text.*" in runtime path
Searching for "/home/guilhermej14/.config/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lazy.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/gitsigns.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-ts-autotag/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lint/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/todo-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mason.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-lspconfig/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/friendly-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-snippets/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/plenary.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope-fzf-native.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/telescope.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-web-devicons/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-notify/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nui.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.pairs/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/noice.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.ai/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/flash.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/mini.animate/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/which-key.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/nvim-treesitter/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/trouble.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/ts-comments.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/bufferline.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/dashboard-nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/tokyonight.nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/LazyVim/parser/text.*"
Searching for "/usr/share/nvim/runtime/parser/text.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/text.*"
Searching for "/usr/lib/nvim/parser/text.*"
Searching for "/home/guilhermej14/.local/state/nvim/lazy/readme/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/indent-blankline.nvim/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-path/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-buffer/after/parser/text.*"
Searching for "/home/guilhermej14/.local/share/nvim/lazy/cmp-nvim-lsp/after/parser/text.*"
not found in runtime path: "parser/text.*"
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing ModeChanged Autocommands for "*"
autocommand call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing: call v:lua.require'lualine'.refresh({'kind': 'window', 'place': ['statusline'], 'trigger': 'autocmd'})

Executing QuitPre Autocommands for "*"
autocommand <Lua 116: vim/_editor.lua:0>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 145: /usr/share/nvim/runtime/lua/vim/lsp.lua:791>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 249: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/init.lua:58>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 236: ~/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/async.lua:17>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 221: ~/.local/share/nvim/lazy/persistence.nvim/lua/persistence/init.lua:35>

chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/lua/persistence/)
chdir(/home/guilhermej14/.config/nvim)
Executing: mks! /home/guilhermej14/.local/state/nvim/sessions/\%home\%guilhermej14\%.config\%nvim.vim
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/persistence.nvim/lua/persistence/)
chdir(/home/guilhermej14/.config/nvim)
Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 144: ~/.local/share/nvim/lazy/mason.nvim/lua/mason/init.lua:9>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 821: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns/attach.lua:367>

Executing: 
Writing ShaDa file "/home/guilhermej14/.local/state/nvim/shada/main.shada"
Executing: highlight! lualine_transitional_lualine_b_normal_to_lualine_c_normal guifg=#3b4261 guibg=#1e2030 gui=None
chdir(/home/guilhermej14/.config/nvim)
chdir(vim/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/lualine.nvim/lua/lualine/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.config/nvim)
chdir(/home/guilhermej14/.local/share/nvim/lazy/nvim-cmp/lua/cmp/utils/)
chdir(/home/guilhermej14/.config/nvim)
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 
Executing WinClosed Autocommands for "*"
autocommand <Lua 70: ~/.local/share/nvim/lazy/mini.animate/lua/mini/animate.lua:1234>

Executing: 